//===----------------------------------------------------------------------===//
//
//  Copyright (c) 2021 Svyatoslav Popov (info@keyvar.com).
//
//  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
//  the License. You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
//  an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
//  specific language governing permissions and limitations under the License.
//
//  SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//
//
//  KvLinearMapping.swift
//  KvKit
//
//  Created by Svyatoslav Popov on 22.04.2018.
//

import Foundation



// MARK: - KvLinearMappingProtocol

public protocol KvLinearMappingProtocol {

    associatedtype Value: BinaryFloatingPoint



    var k: Value { get }
    var b: Value { get }



    /// Initialize an instance mapping *x‚ÇÅ* to *y‚ÇÅ* and *x‚ÇÇ* to *y‚ÇÇ*.
    init(x‚ÇÅ: Value, y‚ÇÅ: Value, x‚ÇÇ: Value, y‚ÇÇ: Value)



    /// - Returns: The result of mapping at *x*.
    func y(at x: Value) -> Value

}



// MARK: Convenience Initializers

public extension KvLinearMappingProtocol {

    init(from: Range<Value>, to: Range<Value>) {
        self.init(x‚ÇÅ: from.lowerBound, y‚ÇÅ: to.lowerBound, x‚ÇÇ: from.upperBound, y‚ÇÇ: to.upperBound)
    }



    init(from: ClosedRange<Value>, to: ClosedRange<Value>) {
        self.init(x‚ÇÅ: from.lowerBound, y‚ÇÅ: to.lowerBound, x‚ÇÇ: from.upperBound, y‚ÇÇ: to.upperBound)
    }

}



// MARK: KvLinearMapping

/// Simple liear mapping.
///
/// - SeeAlso: KvShiftedLinearMapping
public struct KvLinearMapping<Value: BinaryFloatingPoint> {

    public var k, b: Value



    public init(k: Value = 0.0, b: Value = 0.0) {
        self.k = k
        self.b = b
    }

}



// MARK: : KvLinearMappingProtocol

extension KvLinearMapping : KvLinearMappingProtocol {

    public init(x‚ÇÅ: Value, y‚ÇÅ: Value, x‚ÇÇ: Value, y‚ÇÇ: Value) {
        precondition(abs(x‚ÇÇ - x‚ÇÅ) >= Value.ulpOfOne, "Invalid arguments: x‚ÇÅ and x‚ÇÇ must not be equal")

        let d = 1.0 as Value / (x‚ÇÇ - x‚ÇÅ) as Value

        self.init(k: (y‚ÇÇ - y‚ÇÅ) * d, b: (y‚ÇÅ * x‚ÇÇ - y‚ÇÇ * x‚ÇÅ) * d)
    }



    @inlinable
    public func y(at x: Value) -> Value { b.addingProduct(x, k) }

}



// MARK: : CustomStringConvertible

extension KvLinearMapping : CustomStringConvertible {

    public var description: String { "\(Self.self)<\(Value.self)>(\(k) √ó ùë• + \(b))" }

}



// MARK: - KvShiftedLinearMapping

/// Linear mapping with explicit origin.
///
/// - Note: It's designed to minimize floating point inaccuracy.
///
/// - SeeAlso: KvLiearMapping
public struct KvShiftedLinearMapping<Value: BinaryFloatingPoint> {

    public var k, y‚ÇÄ, x‚ÇÄ: Value



    public init(k: Value, x‚ÇÄ: Value, y‚ÇÄ: Value) {
        self.k = k
        self.x‚ÇÄ = x‚ÇÄ
        self.y‚ÇÄ = y‚ÇÄ
    }

}



// MARK: Auxiliary Initializers

extension KvShiftedLinearMapping {

    public init(_ comoment: KvStatistics.Covariance<Value>.Comoment, _ moment: Value) {
        self.init(k: moment > .ulpOfOne ? comoment.value / moment : 0, x‚ÇÄ: comoment.average.x, y‚ÇÄ: comoment.average.y)
    }

}



// MARK: : KvLinearMappingProtocol

extension KvShiftedLinearMapping : KvLinearMappingProtocol {

    @inlinable
    public var b: Value { y‚ÇÄ.addingProduct(-k, x‚ÇÄ) }



    public init(x‚ÇÅ: Value, y‚ÇÅ: Value, x‚ÇÇ: Value, y‚ÇÇ: Value) {
        precondition(abs(x‚ÇÇ - x‚ÇÅ) >= .ulpOfOne, "Invalid arguments: x‚ÇÅ and x‚ÇÇ must not be equal")

        k = (y‚ÇÇ - y‚ÇÅ) / (x‚ÇÇ - x‚ÇÅ)
        y‚ÇÄ = (y‚ÇÅ + y‚ÇÇ) / 2
        x‚ÇÄ = (x‚ÇÅ + x‚ÇÇ) / 2
    }



    @inlinable
    public func y(at x: Value) -> Value { y‚ÇÄ.addingProduct(x - x‚ÇÄ, k) }

}



// MARK:  Protocol CustomStringConvertible

extension KvShiftedLinearMapping : CustomStringConvertible {

    public var description: String { "\(Self.self)<\(Value.self)>(\(k) √ó (ùë• ‚Äì \(x‚ÇÄ)) + \(y‚ÇÄ))" }

}
